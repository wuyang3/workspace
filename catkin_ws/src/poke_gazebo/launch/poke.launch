<?xml version="1.0" encoding="utf-8"?>
<launch>

  <arg name="paused" default="true"/>
  <arg name="gui" default="False"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="load_robot_description" default="true"/>

  <param name="block" textfile="$(find poke_gazebo)/models/block/block_blue.urdf"/>
  <param name="table" textfile="$(find poke_gazebo)/models/table_2/model.sdf"/>

  <param name="robot_description"
    command="$(find xacro)/xacro.py --inorder $(find poke_description)/urdf/my_gripper.urdf.xacro gazebo:=true"/>

  <!-- inherit the logic in empty_world.launch -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find poke_gazebo)/worlds/poke.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- spawn the gripper into gazebo-->
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-param robot_description -urdf -x 0 -y -0.04 -z 0 -model my_gripper"/>

  <node name="spawn_table" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-param table -sdf -x 0.4 -y 0.43 -z 0 -model cafe_table"/>

  <node name="spawn_block" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-param block -urdf -x 0.4 -y 0.43 -z 0.815 -model block"/>

  <!-- ros_control launch file-->
  <include file="$(find poke_control)/launch/poke_control.launch"/>

  <!-- Publish the model state at a lower rate-->
  <!--node name="model_state_publisher" pkg="poke_gazebo" type="poke_model_publisher.py" respawn="false" output="screen">
    <param name="model_name" type="string" value="block" />
  </node-->

  <!-- transform broadcaster of model and camera (static). Dynamic one too slow -->

  <!--node name="camera_tf_broadcaster" pkg="poke_gazebo" type="poke_camera_broadcaster.py"/-->

  <node name="camera_tf_broadcaster" pkg="tf" type="static_transform_publisher" args="0.26 0.43 1.22 0 2.9670597283903604 0 world camera1 20" />

  <node name="model_tf_broadcaster" pkg="poke_gazebo" type="poke_model_broadcaster.py" respawn="false" output="screen">
    <param name="model_name" type="string" value="block" />
  </node>

  <!-- tf listener together with pose transform service -->
  <node name="poke_tf_listener" pkg="poke_gazebo" type="poke_tf_listener.py"/>

  <!-- PinholeCamera model instance subscribes to CameraInfo and provide projection service -->
  <node name="model_image_projection" pkg="poke_gazebo" type="poke_image_projection.py" />

  <!-- CvBridge object together with image saving service, request are image number and saving path -->
  <node name="model_image_saver" pkg="poke_gazebo" type="poke_image_saver.py" />

  <node name="model_world_projection" pkg="poke_gazebo" type="poke_world_projection.py" />
  <!-- Generating poke action-->
  <node name="model_action_generation" pkg="poke_gazebo" type="poke_action_generation.py" />
</launch>
